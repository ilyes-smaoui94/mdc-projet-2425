import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

/**
 * Implémentation de l'interface {@link IModeleCinema} pour la gestion du modèle d'un cinéma.
 * <p>
 * Cette classe gère l'enregistrement et la manipulation des utilisateurs, films, salles, séances, billets et réservations.
 * Les entités sont stockées dans des collections de type {@code Set}.
 * </p>
 * <p>
 * Remarque : cette implémentation n'est pas thread-safe ; une synchronisation externe sera nécessaire
 * dans un environnement multi-thread.
 * </p>
 * 
 * @version 1.0
 */
public class ModeleCinema implements IModeleCinema {
    
    /** L'utilisateur actuellement connecté. */
    private Utilisateur utilisateurConnecte;
    /** Ensemble des utilisateurs enregistrés. */
    private Set<Utilisateur> utilisateursEnregistres;
    /** Ensemble des emails des utilisateurs enregistrés (pour éviter les doublons). */
    private Set<String> emailsUtilisateursEnregistres;
    /** Ensemble des films enregistrés. */
    private Set<Film> filmsEnregistres;
    /** Ensemble des salles enregistrées. */
    private Set<Salle> sallesEnregistrees;
    /** Ensemble des séances enregistrées. */
    private Set<Seance> seancesEnregistrees;
    /** Ensemble des billets enregistrés. */
    private Set<Billet> billetsEnregistres;
    /** Ensemble des réservations enregistrées. */
    private Set<Reservation> reservationsEnregistrees;

    /** Constante retournée en cas d'erreur lors d'une opération. */
    public static final int ID_VALUE_ON_ERROR = -1;
    
    /**
     * Constructeur de {@code ModeleCinema}.
     * <p>
     * Initialise toutes les collections utilisées pour stocker les différentes entités du modèle.
     * </p>
     */
    public ModeleCinema() {
        this.utilisateursEnregistres = new HashSet<Utilisateur>();
        this.emailsUtilisateursEnregistres = new HashSet<String>();
        this.filmsEnregistres = new HashSet<Film>();
        this.sallesEnregistrees = new HashSet<Salle>();
        this.seancesEnregistrees = new HashSet<Seance>();
        this.billetsEnregistres = new HashSet<Billet>();
        this.reservationsEnregistrees = new HashSet<Reservation>();
    }
    
    /**
     * Récupère l'utilisateur enregistré correspondant à l'ID fourni.
     * 
     * @param id L'ID de l'utilisateur à récupérer.
     * @return L'utilisateur correspondant, ou {@code null} s'il n'est pas trouvé.
     */
    @Override
    public Utilisateur getUtilisateur(int id) {
        for (Utilisateur u : this.utilisateursEnregistres) {
            if (u.getId() == id) {
                return u;
            }
        }
        return null;
    }
    
    /**
     * Récupère le film enregistré correspondant à l'ID fourni.
     * 
     * @param id L'ID du film à récupérer.
     * @return Le film correspondant, ou {@code null} s'il n'est pas trouvé.
     */
    @Override
    public Film getFilm(int id) {
        for (Film f : this.filmsEnregistres) {
            if (f.getId() == id) {
                return f;
            }
        }
        return null;
    }
    
    /**
     * Récupère la réservation enregistrée correspondant à l'ID fourni.
     * 
     * @param id L'ID de la réservation à récupérer.
     * @return La réservation correspondante, ou {@code null} si elle n'est pas trouvée.
     */
    @Override
    public Reservation getReservation(int id) {
        for (Reservation r : this.reservationsEnregistrees) {
            if (r.getId() == id) {
                return r;
            }
        }
        return null;
    }
    
    /**
     * Récupère le billet enregistré correspondant à l'ID fourni.
     * 
     * @param id L'ID du billet à récupérer.
     * @return Le billet correspondant, ou {@code null} s'il n'est pas trouvé.
     */
    @Override
    public Billet getBillet(int id) {
        for (Billet b : this.billetsEnregistres) {
            if (b.getId() == id) {
                return b;
            }
        }
        return null;
    }
    
    /**
     * Récupère la salle enregistrée correspondant à l'ID fourni.
     * 
     * @param id L'ID de la salle à récupérer.
     * @return La salle correspondante, ou {@code null} si elle n'est pas trouvée.
     */
    @Override
    public Salle getSalle(int id) {
        for (Salle s : this.sallesEnregistrees) {
            if (s.getId() == id) {
                return s;
            }
        }
        return null;
    }
    
    /**
     * Récupère la séance enregistrée correspondant à l'ID fourni.
     * 
     * @param id L'ID de la séance à récupérer.
     * @return La séance correspondante, ou {@code null} si elle n'est pas trouvée.
     */
    @Override
    public Seance getSeance(int id) {
        for (Seance s : this.seancesEnregistrees) {
            if (s.getId() == id) {
                return s;
            }
        }
        return null;
    }
    
    /**
     * Retourne l'ensemble des utilisateurs enregistrés dans le modèle.
     * 
     * @return Un {@code Set} contenant tous les utilisateurs enregistrés.
     */
    @Override
    public Set<Utilisateur> getListeUtilisateurs() {
        return this.utilisateursEnregistres;
    }
    
    /**
     * Retourne l'ensemble des films enregistrés dans le modèle.
     * 
     * @return Un {@code Set} contenant tous les films enregistrés.
     */
    @Override
    public Set<Film> getListeFilms() {
        return this.filmsEnregistres;
    }
    
    /**
     * Retourne l'ensemble des salles enregistrées dans le modèle.
     * 
     * @return Un {@code Set} contenant toutes les salles enregistrées.
     */
    @Override
    public Set<Salle> getListeSalles() {
        return this.sallesEnregistrees;
    }
    
    /**
     * Retourne l'ensemble des séances enregistrées dans le modèle.
     * 
     * @return Un {@code Set} contenant toutes les séances enregistrées.
     */
    @Override
    public Set<Seance> getListeSeances() {
        return this.seancesEnregistrees;
    }
    
    /**
     * Retourne l'ensemble des séances associées à un film donné.
     * 
     * @param f Le film pour lequel on souhaite obtenir les séances.
     * @return Un {@code Set} contenant les séances du film.
     */
    @Override
    public Set<Seance> getListeSeancesFilm(Film f) {
        Set<Seance> resSeances = new HashSet<Seance>();
        for (Seance s : this.seancesEnregistrees) {
            if (s.getFilm().getId() == f.getId()) {
                resSeances.add(s);
            }
        }
        return resSeances;
    }
    
    /**
     * Retourne l'ensemble des réservations enregistrées dans le modèle.
     * 
     * @return Un {@code Set} contenant toutes les réservations enregistrées.
     */
    @Override
    public Set<Reservation> getListeReservations() {
        return this.reservationsEnregistrees;
    }
    
    /**
     * Retourne l'ensemble des billets enregistrés dans le modèle.
     * 
     * @return Un {@code Set} contenant tous les billets enregistrés.
     */
    @Override
    public Set<Billet> getListeBillets() {
        return this.billetsEnregistres;
    }
    
    /**
     * Enregistre un nouveau client dans le modèle.
     * 
     * @param nom Le nom du client à ajouter.
     * @param email L'adresse email du client à ajouter.
     * @param mdp Le mot de passe du client à ajouter.
     * @return L'ID du client créé en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterClient(String nom, String email, String mdp) {
        try {
            Client nvClient = new Client(nom, email, mdp);
            if (nvClient == null) {
                return ID_VALUE_ON_ERROR;
            }
            this.utilisateursEnregistres.add(nvClient);
            return nvClient.getId();
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Enregistre un nouveau manager dans le modèle.
     * 
     * @param nom Le nom du manager à ajouter.
     * @param email L'adresse email du manager à ajouter.
     * @param mdp Le mot de passe du manager à ajouter.
     * @return L'ID du manager créé en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterManager(String nom, String email, String mdp) {
        try {
            Manager leManager = Manager.getManagerInstance(nom, email, mdp);
            if (leManager == null) {
                return ID_VALUE_ON_ERROR;
            } else {
                this.utilisateursEnregistres.add(leManager);
                return leManager.getId();
            }
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Supprime l'utilisateur dont l'ID est spécifié.
     * 
     * @param id L'ID de l'utilisateur à supprimer.
     * @return {@code true} si la suppression a réussi, {@code false} sinon.
     */
    @Override
    public boolean supprimerUtilisateur(int id) {
        try {
            Utilisateur utilisateurAEnlever = null;
            for (Utilisateur u : this.utilisateursEnregistres) {
                if (u.getId() == id) {
                    utilisateurAEnlever = u;
                    break;
                }
            }
            if (utilisateurAEnlever == null) {
                return false;
            } else {
                this.utilisateursEnregistres.remove(utilisateurAEnlever);
                return true;
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Enregistre un nouveau film dans le modèle.
     * 
     * @param titre Le titre du film.
     * @param a L'année de sortie du film.
     * @param desc La description du film.
     * @return L'ID du film créé en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterFilm(String titre, int a, String desc) {
        try {
            Film nvFilm = new Film(titre, a, desc);
            if (nvFilm == null) {
                return ID_VALUE_ON_ERROR;
            }
            this.filmsEnregistres.add(nvFilm);
            return nvFilm.getId();
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Enregistre un nouveau film avec genres dans le modèle.
     * 
     * @param titre Le titre du film.
     * @param a L'année de sortie du film.
     * @param desc La description du film.
     * @param genres_str Une liste de genres sous forme de chaînes de caractères.
     * @return L'ID du film créé en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterFilm(String titre, int a, String desc, ArrayList<String> genres_str) {
        try {
            Set<Genre> genresSet = new HashSet<Genre>();
            for (String g_str : genres_str) {
                for (Genre g : Genre.values()) {
                    if (g.name().equalsIgnoreCase(g_str)) {
                        genresSet.add(g);
                    }
                }
            }
            Film nvFilm = new Film(titre, a, desc, genresSet);
            if (nvFilm == null) {
                return ID_VALUE_ON_ERROR;
            } else {
                this.filmsEnregistres.add(nvFilm);
                return nvFilm.getId();
            }
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Supprime le film dont l'ID est spécifié.
     * 
     * @param id L'ID du film à supprimer.
     * @return {@code true} si la suppression a réussi, {@code false} sinon.
     */
    @Override
    public boolean supprimerFilm(int id) {
        try {
            Film filmAEnlever = null;
            for (Film f : this.filmsEnregistres) {
                if (f.getId() == id) {
                    filmAEnlever = f;
                    break;
                }
            }
            if (filmAEnlever == null) {
                return false;
            } else {
                this.filmsEnregistres.remove(filmAEnlever);
                return true;
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Enregistre une nouvelle salle dans le modèle.
     * 
     * @param numero Le numéro de la salle.
     * @param capacite La capacité de la salle.
     * @return L'ID de la salle créée en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterSalle(int numero, int capacite) {
        try {
            Salle s = new Salle(numero, capacite);
            if (s == null) {
                return ID_VALUE_ON_ERROR;
            } else {
                // Vérifie qu'une salle avec le même numéro n'existe pas déjà
                for (Salle s2 : this.sallesEnregistrees) {
                    if (s2.getNumero() == numero) {
                        return ID_VALUE_ON_ERROR;
                    }
                }
                this.sallesEnregistrees.add(s);
                return s.getId();
            }
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Supprime la salle dont l'ID est spécifié.
     * 
     * @param id L'ID de la salle à supprimer.
     * @return {@code true} si la suppression a réussi, {@code false} sinon.
     */
    @Override
    public boolean supprimerSalle(int id) {
        try {
            Salle salleAEnlever = null;
            for (Salle s : this.sallesEnregistrees) {
                if (s.getId() == id) {
                    salleAEnlever = s;
                    break;
                }
            }
            if (salleAEnlever == null) {
                return false;
            } else {
                this.sallesEnregistrees.remove(salleAEnlever);
                return true;
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Enregistre une nouvelle séance dans le modèle.
     * 
     * @param idSalle L'ID de la salle pour la séance.
     * @param idFilm L'ID du film pour la séance.
     * @param heureDebut La date et l'heure de début de la séance.
     * @return L'ID de la séance créée en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int ajouterSeance(int idSalle, int idFilm, Date heureDebut) {
        try {
            Seance s = new Seance(this.getSalle(idSalle), this.getFilm(idFilm), heureDebut);
            if (s == null) {
                return ID_VALUE_ON_ERROR;
            } else {
                this.seancesEnregistrees.add(s);
                return s.getId();
            }
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Supprime la séance dont l'ID est spécifié.
     * 
     * @param id L'ID de la séance à supprimer.
     * @return {@code true} si la suppression a réussi, {@code false} sinon.
     */
    @Override
    public boolean supprimerSeance(int id) {
        try {
            Seance seanceAEnlever = null;
            for (Seance s : this.seancesEnregistrees) {
                if (s.getId() == id) {
                    seanceAEnlever = s;
                    break;
                }
            }
            if (seanceAEnlever == null) {
                return false;
            } else {
                this.seancesEnregistrees.remove(seanceAEnlever);
                return true;
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Crée une nouvelle réservation dans le modèle pour un utilisateur donné.
     * 
     * @param idUtilisateur L'ID de l'utilisateur effectuant la réservation.
     * @param billetsAPrendre Un ensemble de billets à réserver (pour plusieurs places, plusieurs instances du même billet peuvent être fournies).
     * @return L'ID de la réservation créée en cas de succès, ou {@code -1} en cas d'erreur.
     */
    @Override
    public int creerReservation(int idUtilisateur, Set<Billet> billetsAPrendre) {
        try {
            Utilisateur uResa = this.getUtilisateur(idUtilisateur);
            if (uResa == null) {
                return ID_VALUE_ON_ERROR;
            }
            for (Billet b : billetsAPrendre) {
                if (b != null) {
                    this.billetsEnregistres.add(b);
                }
            }
            Reservation nvlReservation = new Reservation(uResa, billetsAPrendre);
            this.reservationsEnregistrees.add(nvlReservation);
            return nvlReservation.getId();
        } catch (Exception e) {
            return ID_VALUE_ON_ERROR;
        }
    }
    
    /**
     * Supprime la réservation dont l'ID est spécifié.
     * 
     * @param id L'ID de la réservation à supprimer.
     * @return {@code true} si la suppression a réussi, {@code false} sinon.
     */
    @Override
    public boolean supprimerReservation(int id) {
        try {
            Reservation reservationAEnlever = null;
            for (Reservation r : this.reservationsEnregistrees) {
                if (r.getId() == id) {
                    reservationAEnlever = r;
                    break;
                }
            }
            if (reservationAEnlever == null) {
                return false;
            } else {
                for (Billet b : reservationAEnlever.getBillets()) {
                    this.billetsEnregistres.remove(b);
                }
                this.reservationsEnregistrees.remove(reservationAEnlever);
                return true;
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Tente de connecter un utilisateur en vérifiant son adresse email et son mot de passe.
     * Si la connexion est réussie, l'utilisateur devient l'utilisateur connecté.
     * 
     * @param email L'adresse email de l'utilisateur.
     * @param mdp Le mot de passe de l'utilisateur.
     * @return Un {@code ArrayList<Boolean>} contenant deux éléments : le premier vaut {@code true} en cas de succès, et le second indique si l'utilisateur est un manager.
     */
    @Override
    public ArrayList<Boolean> connecterUtilisateur(String email, String mdp) {
        ArrayList<Boolean> resConnexion = new ArrayList<Boolean>(Arrays.asList(false, false));
        try {
            for (Utilisateur u : utilisateursEnregistres) {
                if (u.getEmail().equals(email) && u.getMotDePasse().equals(mdp)) {
                    utilisateurConnecte = u;
                    resConnexion.set(0, true);
                    resConnexion.set(1, (u instanceof Manager));
                    return resConnexion;
                }
            }
            resConnexion.set(0, false);
            return resConnexion;
        } catch (Exception e) {
            resConnexion.set(0, false);
            return resConnexion;
        }
    }
    
    /**
     * Déconnecte l'utilisateur actuellement connecté.
     * 
     * @return {@code true} si la déconnexion a réussi, {@code false} sinon.
     */
    @Override
    public boolean deconnecterUtilisateur() {
        try {
            if (this.utilisateurConnecte != null) {
                this.utilisateurConnecte = null;
                return true;
            }
            return false;
        } catch (Exception e) {
            return false;
        }
    }
}

